

# https://www.docker.com/blog/how-to-dockerize-django-app/
services:
 db:
   image: postgres:17
   environment:
     POSTGRES_DB: ${DB_NAME}
     POSTGRES_USER: ${DB_USER}
     POSTGRES_PASSWORD: ${DB_PASSWORD}
    #  do we need this port open?
   ports:
     - "5432:5432"
    #  To persist the data beyond the life of the container we configured a volume. a bit unline nginx where we have to 
    # create a volume for the nginx container and make a temp container to copy the files into the volume
   volumes:
     - postgres_data:/var/lib/postgresql/data
   env_file:
     - .env


# changes here for redis
    #  https://soshace.com/2020/12/31/dockerizing-django-with-postgres-redis-and-celery/
 redis:
  image: redis:alpine
  # https://saasitive.com/tutorial/django-celery-redis-postgres-docker-compose/
  expose:
      - 6379
#  now we add celery to the network
# https://medium.com/@pshanarat/implement-a-dockerized-django-application-with-redis-celery-and-postgresql-9acd23e3c54c
 celery:
  build:
    # apparently we dont need to copy the files into the docker in context here 
    context: .
  restart: always
  command: celery -A mysite.celery worker --loglevel=INFO --concurrency=4

  # i guess we dont need volumes during production so we should comment this out. for now lets just use the similar
  # directory tree as web
  # volumes:
  #   - .:/home/app/web
  container_name: celery_container
  depends_on:
    - redis
    - db

    # for non root user
  # user: "app"
# Error response from daemon: unable to find user app: no matching entries in passwd file.
# tetsing if the error above is resolved by commenting the user:app line out


    # https://docs.celeryq.dev/en/latest/userguide/daemonizing.html#running-the-worker-with-superuser-privileges-root
  # we could add a C-ROOT to prevent the worker from running as root eventhough it is defaulted as false already
  environment:
      - C_FORCE_ROOT=False
 
 django-web:
   build:
  #  everytiing in the cuurent directory goes inside the docker
  # observe how the dockerfile is being used only inisde the django-web container. the workdir created here will not be the same in other containers
    context: . 
    # context is . so it looks inside the current directory for the dockerfile
    dockerfile: Dockerfile.prod
    # we use args because of issues in applying non root user. the args in the yaml file refer to the id o
  # of the user. run id in sh to get the id of the user
  # refer https://code.visualstudio.com/remote/advancedcontainers/add-nonroot-user
    # args:
    #     USERNAME: app
    #     USER_UID: 197609
    #     USER_GID: 197121
   #if context is ./app it mean only the files inside the app will go inside the docker
   container_name: django-docker
  #  command: gunicorn mysite.wsgi:application --bind 0.0.0.0:8000 --timeout 500 --workers 3
  #  --workers=4 --timeout=120 needed for better performance
  #
   volumes:
    - static_volume:/app/staticfiles
    - media_volume:/app/media
  # for dev
   expose:
    - 8000
# during dev?
  #  ports:
  #    - "8000:8000"

  # during prod, use expose
   depends_on:
     - db
     - redis #change here for redis

   environment:
     DJANGO_SECRET_KEY: "${SECRET_KEY}"
     DEBUG: True
     DJANGO_LOGLEVEL: ${DJANGO_LOGLEVEL}
     DJANGO_ALLOWED_HOSTS: ${DJANGO_ALLOWED_HOSTS}
     DATABASE_ENGINE: ${DATABASE_ENGINE}
     DATABASE_NAME: ${DB_NAME}
     DATABASE_USERNAME: ${DB_USER}
 
     DATABASE_PASSWORD: ${DB_PASSWORD}
     DATABASE_HOST: ${DATABASE_HOST}
     DATABASE_PORT: 5432
   env_file:
     - .env
    #  we will need the certs for the django too i think or maybe not
  #  volumes:
  #     - ./example.com+5.pem:/etc/nginx/ssl/example.com+5.pem
  #     - ./example.com+5-key.pem:/etc/nginx/ssl/example.com+5-key.pem

# for nginx
# https://testdriven.io/blog/dockerizing-django-with-postgres-gunicorn-and-nginx/
 nginx:
#  its looking inside the nginx folder in the root
    build: ./nginx
    # for static
    # ensure no other service like apache is using these ports
    ports:
      - 80:80
      - 443:443 #for https
    depends_on:
      - django-web
      - db
      # wehave to deicde if we want the nginx container to wait for the db to be readt as well
# https://kinsta.com/blog/docker-compose-volumes/#:~:text=To%20attach%20a%20volume%20to,using%20the%20same%20volume%20name.
      # we mount the ssl certs to the nginx container
    volumes:
    # instead of mounting we need to create named volumes for persistance
      - nginx_ssl:/etc/nginx/ssl
      # - ./example.com+5.pem:/etc/nginx/ssl/example.com+5.pem
      # - ./example.com+5-key.pem:/etc/nginx/ssl/example.com+5-key.pem

    # for static
      - static_volume:/app/staticfiles 
      - media_volume:/app/media

# comment his out forproduction
      # - ./example.com+5.pem:/etc/nginx/ssl/example.com+5.pem
      # - ./example.com+5-key.pem:/etc/nginx/ssl/example.com+5-key.pem

# we are not going to need volume in production. or we may use it since we run into this erro
# service "db" refers to undefined volume postgres_data: invalid compose project
volumes:
   postgres_data:
  #  ngnix_ssl will be created via terminal
  # 1.	docker volume create nginx_ssl
  # docker run --rm -v nginx_ssl:/mnt -v "/$(pwd):/host" busybox cp /host/example.com+5.pem /host/example.com+5-key.pem /mnt/
   nginx_ssl:
    external: true
   static_volume:
   media_volume:

# https://docs.docker.com/reference/compose-file/volumes/
# external
# If set to true:
# external specifies that this volume already exists on the platform and its lifecycle is managed outside of that of the application. Compose then doesn't create the volume and returns an error if the volume doesn't exist.
# All other attributes apart from name are irrelevant. If Compose detects any other attribute, it rejects the Compose file as invalid.
