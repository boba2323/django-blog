upstream django-web {
    server django-web:8000;
}
# gunicorn is the upstream server?


server {

    listen 80;
    server_name  localhost;
    # redirects to https
   # Redirect ONLY if the request is NOT already HTTPS
    return 301 https://$host$request_uri;
}

server {
    # Listen on port 443, which is the default port for HTTPS.
    listen 443 ssl;
    server_name localhost;
    server_tokens off;
    
    # get the certifcate that we mounted in compose
    ssl_certificate /etc/nginx/ssl/example.com+5.pem;
    ssl_certificate_key /etc/nginx/ssl/example.com+5-key.pem;
    location / {
        proxy_pass http://django-web;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $host;
        proxy_set_header    X-Real-IP           $remote_addr;
        # https://httptoolkit.com/blog/what-is-x-forwarded-for/
        # django doesnt know it is running behind a ngninx with https
        #  This tells Django that requests are coming from https://, so it won’t generate http:// redirects.
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_redirect off;
    }
    # Gunicorn itself is not running HTTPS inside the container — it's just HTTP on port 8000.
# HTTPS is only handled by NGINX at the edge.
    # for static

    location /static/ {
        alias /app/staticfiles/;
    }

    # for media
    location /media/ {
        alias /app/media/;
    }

}