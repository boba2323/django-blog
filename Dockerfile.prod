
###########
# BUILDER #
###########

FROM python:3.12-slim AS builder 

RUN apt-get update && apt-get install -y --no-install-recommends \
    gcc \
    libpq-dev \
    python3-dev \
    libssl-dev \
    libffi-dev \
    pkg-config \
    libxml2-dev \
    libxmlsec1-dev \
    libxmlsec1-openssl \
    libxmlsec1 \
    libxml2 \
    libxslt1.1 \
    xmlsec1-openssl \
    libxslt1-dev \
    xmlsec1 \
 && rm -rf /var/lib/apt/lists/*


RUN mkdir /app
WORKDIR /app
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1 
RUN pip install --upgrade pip 
COPY requirements.txt  /app/
RUN pip install --no-cache-dir -r requirements.txt

############################################33
# FINAL #
#################################3#########################

FROM python:3.12-slim 

RUN apt-get update && apt-get install -y --no-install-recommends \
    gcc \
    libpq-dev \
    python3-dev \
    libssl-dev \
    libffi-dev \
    pkg-config \
    libxml2-dev \
    libxmlsec1-dev \
    libxmlsec1-openssl \
    libxmlsec1 \
    libxml2 \
    libxslt1.1 \
    xmlsec1-openssl \
    libxslt1-dev \
    xmlsec1 \
 && rm -rf /var/lib/apt/lists/*

# https://www.docker.com/blog/how-to-dockerize-django-app/
RUN useradd -m -r appuser && \
   mkdir /app && \
   chown -R appuser /app

ENV HOME=/app
RUN mkdir -p $HOME/staticfiles && \
    chown -R appuser:appuser $HOME/staticfiles

RUN mkdir -p $HOME/media && \
    chown -R appuser:appuser $HOME/media


COPY --from=builder /usr/local/lib/python3.12/site-packages/ /usr/local/lib/python3.12/site-packages/
COPY --from=builder /usr/local/bin/ /usr/local/bin/
WORKDIR /app
COPY --chown=appuser:appuser . .
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1 

# chown all the files to the app user/running it again to fix permissions issue for mounted volumes
RUN chown -R appuser:appuser $HOME

USER appuser
EXPOSE 8000 
# CMD ["python", "manage.py", "runserver_plus", "0.0.0.0:8000" , "--cert-file", "/app/example.com+5.pem", "--key-file", "/app/example.com+5-key.pem"]
# docker-compose -f compose.prod.yml up --build
CMD ["gunicorn", "--bind", "0.0.0.0:8000", "--timeout", "500", "--workers", "3", "mysite.wsgi:application", "--preload"]


# "gunicorn", "--bind", "0.0.0.0:8000", "--workers", "3", "my_docker_django_app.wsgi:application"